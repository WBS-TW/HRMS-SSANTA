")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fixedsize = true, width = 1]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS']
B [label = 'Convert raw data from \\n vendor format to mzML file format']
C [label = 'Fill in compound and \\n method information in template']
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound']
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks']
F [label = 'Export final spectra to msp format']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fixedsize = true, width = 0.9]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS']
B [label = 'Convert raw data from \\n vendor format to mzML file format']
C [label = 'Fill in compound and \\n method information in template']
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound']
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks']
F [label = 'Export final spectra to msp format']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fixedsize = true, width = 0.9, height = 0.9]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS']
B [label = 'Convert raw data from \\n vendor format to mzML file format']
C [label = 'Fill in compound and \\n method information in template']
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound']
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks']
F [label = 'Export final spectra to msp format']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fixedsize = true, width = 0.9, height = 0.9]
A [label = 'Analysis']
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis']
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fontsize = 20]
A [label = 'Analysis']
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box, fontsize = 30]
A [label = 'Analysis']
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape=box, fontsize=30]
A [label = 'Analysis']
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis', fontsize = 30]
B [label = 'Convert format']
C [label = 'Fill information']
D [label = 'Use MD-DIAL']
E [label = 'Export to MS-FINDER']
F [label = 'Export to .msp']
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 14]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 14]
C [label = 'Fill in compound and \\n method information in template', fontsize = 14]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize=14]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 14]
C [label = 'Fill in compound and \\n method information in template', fontsize = 14]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 14]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 14]
C [label = 'Fill in compound and \\n method information in template', fontsize = 14]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 14, fixedsize = true, height = 0.7, width = 0.7]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 14]
C [label = 'Fill in compound and \\n method information in template', fontsize = 14]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24, fixedsize = true, height = 0.7, width = 0.7]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
graph [layout = dot, overlap = false, rankdir = LR]
G [label = 'Test', fontsize = 24]
# edge statements
edge [color = black]
A -> {G}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
library(tidyverse)
library(kableExtra)
library(DiagrammeR)
library(plotly)
library(processx)
knitr::include_graphics("images/MSConvert.png", dpi = 100)
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
knitr::include_graphics("images/chap15/MSConvert_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSConvert_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_choosefiles.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_MS1Dec.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_identification.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_filtering.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_7.png", dpi = 100)
?kable
mas_table <- read.delim("images/chap15/MTM00029.txt")
View(mas_table)
mas_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table)
msp_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table)
msp_table
?cat
cat(msp_table, sep = "\t")
cat(msp_table, sep = "\n")
msp_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table, sep = "\n")
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LCMSConvert.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_Adduct.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_choosefiles.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_MS2Dec.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_MS2Dec.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_Adduct.png", dpi = 100)
knitr::include_graphics("images/speclib/MSDIAL_7.png", dpi = 100)
knitr::include_graphics("images/speclib/MSDIAL_8.png", dpi = 100)
msp_table <- readLines("images/speclib/MTM00029.txt")
cat(msp_table, sep = "\n")
read.csv("images/reproducible/DockerCommands.csv")
read.csv("images/reproducible/DockerCommands.csv")
msp_table <- readLines("images/speclib/MTM00029.txt")
cat(msp_table, sep = "\n")
knitr::include_graphics("images/speclib/MSDIAL_8.png", dpi = 100)
read.csv("images/reproducible/DockerCommands.csv")
?read.delim
read.delim("images/reproducible/DockerCommands.csv")
read.delim("images/reproducible/DockerCommands.txt")
read.delim("images/reproducible/DockerCommands.txt", header = TRUE, sep = "\t", quote = "",
dec = ".", fill = TRUE, comment.char = "", ...)
read.delim("images/reproducible/DockerCommands.txt", header = TRUE, sep = "\t", quote = "",
dec = ".", fill = TRUE, comment.char = "")
readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable, escape = FALSE)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
dockertable
DT::datatable()
?DT::datatable
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable,rownames = FALSE,  escape = FALSE)
install.packages(c("backports", "bayestestR", "blogdown"))
install.packages(c("crosstalk", "DT", "ff", "future"))
install.packages(c("VennDiagram", "viridis", "workflows", "vroom"))
install.packages(c("broom", "cpp11"))
install.packages(c("cli", "crayon", "dendextend", "generics", "gert", "ggVennDiagram", "glue", "htmlTable", "igraph"))
install.packages(c("tensorflow", "tibble", "tinytex", "tzdb", "usethis", "uuid", "V8", "xfun", "xgboost", "yardstick"))
install.packages(c("ncdf4", "parallelly", "parameters", "pillar", "pkgload", "readr"))
install.packages(c("rcdk", "rgl", "rio", "rlang", "rsample", "rsconnect", "rvest", "seriation"))
install.packages(c("rcdk", "rgl", "rio", "rlang", "rsample", "rsconnect", "rvest", "seriation"))
install.packages("rcdk")
install.packages("yardstick")
install.packages(c("rlang", "rsample"))
install.packages(c("rlang", "rsample"))
install.packages(c("tibble", "usethis"))
install.packages(c("rgl", "rio"))
blogdown:::serve_site()
