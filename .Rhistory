D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 14, fixedsize = true, height = 0.7, width = 0.7]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 14]
C [label = 'Fill in compound and \\n method information in template', fontsize = 14]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 14]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 14]
F [label = 'Export final spectra to msp format', fontsize = 14]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24, fixedsize = true, height = 0.7, width = 0.7]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
graph [layout = dot, overlap = false, rankdir = LR]
G [label = 'Test', fontsize = 24]
# edge statements
edge [color = black]
A -> {G}
}
")
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
library(tidyverse)
library(kableExtra)
library(DiagrammeR)
library(plotly)
library(processx)
knitr::include_graphics("images/MSConvert.png", dpi = 100)
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
DiagrammeR::grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = TB]
# node statements
node [shape = box]
A [label = 'Analysis of standard \\n using LC-HRMS or GC-HRMS', fontsize = 24]
B [label = 'Convert raw data from \\n vendor format to mzML file format', fontsize = 24]
C [label = 'Fill in compound and \\n method information in template', fontsize = 24]
D [label = 'Use MD-DIAL to perform spectral \\n deconvolution and generate \\n spectra for each compound', fontsize = 24]
E [label = 'Export the spectra to MS-FINDER \\n to annotate spectral peaks', fontsize = 24]
F [label = 'Export final spectra to msp format', fontsize = 24]
# edge statements
edge [color = black]
A -> {B}
B -> {C}
C -> {D}
D -> {E}
E -> {F}
}
")
knitr::include_graphics("images/chap15/MSConvert_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSConvert_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_startproject.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_choosefiles.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_MS1Dec.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_identification.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_filtering.png", dpi = 100)
knitr::include_graphics("images/chap15/MSDIAL_7.png", dpi = 100)
?kable
mas_table <- read.delim("images/chap15/MTM00029.txt")
View(mas_table)
mas_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table)
msp_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table)
msp_table
?cat
cat(msp_table, sep = "\t")
cat(msp_table, sep = "\n")
msp_table <- readLines("images/chap15/MTM00029.txt")
cat(msp_table, sep = "\n")
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LCMSConvert.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_Adduct.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_start.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_choosefiles.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_peakdetection.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_MS2Dec.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_MS2Dec.png", dpi = 100)
knitr::include_graphics("images/speclib/LC_MSDIAL_Adduct.png", dpi = 100)
knitr::include_graphics("images/speclib/MSDIAL_7.png", dpi = 100)
knitr::include_graphics("images/speclib/MSDIAL_8.png", dpi = 100)
msp_table <- readLines("images/speclib/MTM00029.txt")
cat(msp_table, sep = "\n")
read.csv("images/reproducible/DockerCommands.csv")
read.csv("images/reproducible/DockerCommands.csv")
msp_table <- readLines("images/speclib/MTM00029.txt")
cat(msp_table, sep = "\n")
knitr::include_graphics("images/speclib/MSDIAL_8.png", dpi = 100)
read.csv("images/reproducible/DockerCommands.csv")
?read.delim
read.delim("images/reproducible/DockerCommands.csv")
read.delim("images/reproducible/DockerCommands.txt")
read.delim("images/reproducible/DockerCommands.txt", header = TRUE, sep = "\t", quote = "",
dec = ".", fill = TRUE, comment.char = "", ...)
read.delim("images/reproducible/DockerCommands.txt", header = TRUE, sep = "\t", quote = "",
dec = ".", fill = TRUE, comment.char = "")
readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable, escape = FALSE)
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
dockertable
DT::datatable()
?DT::datatable
dockertable <- readxl::read_xlsx("images/reproducible/dockercommands.xlsx")
DT::datatable(dockertable,rownames = FALSE,  escape = FALSE)
install.packages(c("backports", "bayestestR", "blogdown"))
install.packages(c("crosstalk", "DT", "ff", "future"))
install.packages(c("VennDiagram", "viridis", "workflows", "vroom"))
install.packages(c("broom", "cpp11"))
install.packages(c("cli", "crayon", "dendextend", "generics", "gert", "ggVennDiagram", "glue", "htmlTable", "igraph"))
install.packages(c("tensorflow", "tibble", "tinytex", "tzdb", "usethis", "uuid", "V8", "xfun", "xgboost", "yardstick"))
install.packages(c("ncdf4", "parallelly", "parameters", "pillar", "pkgload", "readr"))
install.packages(c("rcdk", "rgl", "rio", "rlang", "rsample", "rsconnect", "rvest", "seriation"))
install.packages(c("rcdk", "rgl", "rio", "rlang", "rsample", "rsconnect", "rvest", "seriation"))
install.packages("rcdk")
install.packages("yardstick")
install.packages(c("rlang", "rsample"))
install.packages(c("rlang", "rsample"))
install.packages(c("tibble", "usethis"))
install.packages(c("rgl", "rio"))
blogdown:::serve_site()
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box,
fontname = Helvetica, fontsize = 35, style = filled]
node [color = black, fillcolor = white, fixedsize = false]
# A [label = 'Indoor dust collected \\n among different \\n use categories']
#
# node [color = black, fillcolor = white, fixedsize = false]
# B1 [label = 'Collect different groups']
# B2 [label = 'QA/QC']
#
#
# node [color = black, fillcolor = white, fixedsize = false]
# C1 [label = 'Sample different groups']
# C2 [label = 'Suspect list of Cl/Br compounds']
node [color = black, fillcolor = white, fixedsize = false]
D1 [label = 'Sample extraction']
D1_1 [label = 'Hexane 3 mL']
D1_2 [label = 'Hexane: Acetone (1:1) 3 mL']
D1_3 [label = 'Toluene 3 mL']
D2 [label = 'Combine and split 1:1']
D3_1 [label = 'GC']
D3_2 [label = 'LC']
D4 [label = 'split 1:1']
E1 [label = 'GC-HRMS']
E2 [label = 'LC-HRMS']
#
#
# node [color = black, fillcolor = white, fixedsize = false]
# F1 [label = 'Suspect screening']
# F2 [label = 'Nontarget']
#
# G1 [label = 'Mass defect plots']
# edge statements
edge [color = black]
# A -> {B1}
# B2 -> {C1}
# B1 -> {C1 C2}
# C1 -> {D1}
D1 -> {D1_1}
D1_1 -> {D1_2}
D1_2 -> {D1_3}
D1_1 -> {D2}
D1_2 -> {D2}
D2 -> {D3_1}
D2 -> {D3_2}
D3_1 -> {D4}
D1_3 -> {D4}
D3_2 -> {E2}
D4 -> {E1}
D1_3 -> {E1}
}
")
library(tidyverse)
library(kableExtra)
library(DiagrammeR)
library(plotly)
library(processx)
# Diagrammer: rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false, rankdir = LR]
# node statements
node [shape = box,
fontname = Helvetica, fontsize = 35, style = filled]
node [color = black, fillcolor = white, fixedsize = false]
# A [label = 'Indoor dust collected \\n among different \\n use categories']
#
# node [color = black, fillcolor = white, fixedsize = false]
# B1 [label = 'Collect different groups']
# B2 [label = 'QA/QC']
#
#
# node [color = black, fillcolor = white, fixedsize = false]
# C1 [label = 'Sample different groups']
# C2 [label = 'Suspect list of Cl/Br compounds']
node [color = black, fillcolor = white, fixedsize = false]
D1 [label = 'Sample extraction']
D1_1 [label = 'Hexane 3 mL']
D1_2 [label = 'Hexane: Acetone (1:1) 3 mL']
D1_3 [label = 'Toluene 3 mL']
D2 [label = 'Combine and split 1:1']
D3_1 [label = 'GC']
D3_2 [label = 'LC']
D4 [label = 'split 1:1']
E1 [label = 'GC-HRMS']
E2 [label = 'LC-HRMS']
#
#
# node [color = black, fillcolor = white, fixedsize = false]
# F1 [label = 'Suspect screening']
# F2 [label = 'Nontarget']
#
# G1 [label = 'Mass defect plots']
# edge statements
edge [color = black]
# A -> {B1}
# B2 -> {C1}
# B1 -> {C1 C2}
# C1 -> {D1}
D1 -> {D1_1}
D1_1 -> {D1_2}
D1_2 -> {D1_3}
D1_1 -> {D2}
D1_2 -> {D2}
D2 -> {D3_1}
D2 -> {D3_2}
D3_1 -> {D4}
D1_3 -> {D4}
D3_2 -> {E2}
D4 -> {E1}
D1_3 -> {E1}
}
")
grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false]
# node statements
node [shape = box,
fontname = Helvetica, fontsize = 35, style = filled]
node [color = black, fillcolor = white, fixedsize = false]
ZERO [label = 'Deconvolution']
A [label = 'Target analysis']
B [label = 'Suspect list screening']
C [label = 'NIST library screening']
C1 [label = 'Molecular ion confirmation']
C2 [label = 'Retention time index']
D [label = 'Mass defect \\n (selected mz, rt and int of annotated compounds']
subgraph cluster2 {
E [label = 'Annotation']
ID1 [label = 'Confirm EIC peaks']
}
F [label = 'Molecular networking']
G [label = 'Multivariate statistics']
ID2 [label = 'Peak/Component list with \\n partial annotation']
Q1 [label = 'Semiquantify across samples']
# edge statements
edge [color = black]
ZERO -> {A B C}
A -> {E}
B -> {E}
{C1 C2} -> {C}
C -> {E}
E -> {ID1}
ID1 -> {ID2}
ID2 -> {F}
ID2 -> {G}
ID2 -> {D}
ID2 -> {Q1}
}
")
grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false]
# node statements
node [shape = box,
fontname = Helvetica, fontsize = 35, style = filled]
node [color = black, fillcolor = white, fixedsize = false]
ZERO [label = 'Deconvolution']
A [label = 'Target analysis']
B [label = 'Suspect list screening']
C [label = 'NIST library screening']
C1 [label = 'Molecular ion confirmation']
C2 [label = 'Retention time index']
D [label = 'Mass defect \\n (selected mz, rt and int of annotated compounds']
subgraph cluster2 {
E [label = 'Annotation']
ID1 [label = 'Confirm EIC peaks']
}
F [label = 'Molecular networking \\n combine both suspect list msp with unknown msp. High partial correlation gives indication on similar structure']
G [label = 'Multivariate statistics']
ID2 [label = 'Peak/Component list with \\n partial annotation']
Q1 [label = 'Semiquantify across samples']
# edge statements
edge [color = black]
ZERO -> {A B C}
A -> {E}
B -> {E}
{C1 C2} -> {C}
C -> {E}
E -> {ID1}
ID1 -> {ID2}
ID2 -> {F}
ID2 -> {G}
ID2 -> {D}
ID2 -> {Q1}
}
")
grViz("
digraph Scheme {
# graph statement
graph [layout = dot, overlap = false]
# node statements
node [shape = box,
fontname = Helvetica, fontsize = 35, style = filled]
node [color = black, fillcolor = white, fixedsize = false]
ZERO [label = 'Deconvolution']
A [label = 'Target analysis']
B [label = 'Suspect list screening']
C [label = 'NIST library screening']
C1 [label = 'Molecular ion confirmation']
C2 [label = 'Retention time index']
D [label = 'Mass defect \\n (selected mz, rt and int of annotated compounds']
subgraph cluster2 {
E [label = 'Annotation']
ID1 [label = 'Confirm EIC peaks']
}
F [label = 'Molecular networking \\n combine both suspect list msp with unknown msp. \\n
High partial correlation gives indication on similar structure']
G [label = 'Multivariate statistics']
ID2 [label = 'Peak/Component list with \\n partial annotation']
Q1 [label = 'Semiquantify across samples']
# edge statements
edge [color = black]
ZERO -> {A B C}
A -> {E}
B -> {E}
{C1 C2} -> {C}
C -> {E}
E -> {ID1}
ID1 -> {ID2}
ID2 -> {F}
ID2 -> {G}
ID2 -> {D}
ID2 -> {Q1}
}
")
library(bookdown)
clean_book()
# These are some optimum tune params
TuneParams <- dplyr::tibble(
Parameter = c(
"Repeller voltage (8-11 V)",
"Source offset",
"Lens 1",
"Lens 2",
"Lens 3",
"Electron lens voltage",
"Emission current (50-60 uA)",
"IT (< 1)",
"Normalized target level (NL) (clean source 1E9)",
"Fore vacuum (< 6E-2 mbar)",
"Ultrahigh vacuum (< 9E-10 mbar)"
)
)
DT::datatable(TuneParams)
